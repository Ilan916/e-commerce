generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  lastname      String?
  firstname     String?
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  dateOfBirth   DateTime?
  phoneNumber   String?
  address       String?
  role          Role            @default(CLIENT)  // Ajout du champ role
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  CLIENT
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String       @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  stock       Int
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]   // Relation inverse avec CartItem
  orderItems  OrderItem[]  // Relation inverse avec OrderItem

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id       String    @id @default(cuid())
  userId   String    @unique // Unique pour une relation one-to-one
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id           String       @id @default(cuid())
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  totalPrice   Float
  status       String       // Par exemple : "En cours", "Livr√©e", etc.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OrderItem {
  id        String    @id @default(cuid())
  orderId   String
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float     // Prix au moment de la commande
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}