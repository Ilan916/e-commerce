generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  firstname     String?
  lastname      String?
  address       String?
  dateOfBirth   DateTime?
  phoneNumber   String?
  password      String
  role          Role           @default(CLIENT)
  accounts      Account[]
  cart          Cart?
  notifications Notification[]
  orders        Order[]
  sessions      Session[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String?
  stock       Int
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
}

model ProductSuggestion {
  id        String  @id @default(uuid())
  name      String  @unique
  createdAt DateTime @default(now())
}


model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  totalPrice      Float
  stripeSessionId String?     @unique  // Make sure this field exists
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  status          OrderStatus @default(EN_COURS)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  validated Boolean @default(false)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  ADMIN
  CLIENT
}

enum OrderStatus {
  EN_COURS
  PAYEE
  EN_PREPARATION
  EXPEDIEE
  LIVREE
  ANNULEE
}
