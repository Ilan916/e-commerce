import { NextResponse } from "next/server";
import OpenAI from "openai";
import { PrismaClient } from "@prisma/client";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
const prisma = new PrismaClient();

export async function POST(req: Request) {
  try {
    const { imageBase64 } = await req.json();
    if (!imageBase64) {
      return NextResponse.json({ error: "Aucune image fournie" }, { status: 400 });
    }

    // üìå R√©cup√©ration des produits en base (nom, id, prix et image)
    const products = await prisma.product.findMany({
      select: { id: true, name: true, price: true, imageUrl: true },
    });

    // üîç Pr√©parer les noms de produits pour correspondance avec l'IA
    const productNames = products.map((product) => product.name.toLowerCase());

    // üìå Sch√©ma JSON attendu
    const recipeSchema = {
      type: "object",
      properties: {
        dish: { type: "string", description: "Nom du plat d√©tect√©" },
        ingredients_needed: {
          type: "array",
          description: "Liste des ingr√©dients n√©cessaires",
          items: { type: "string" },
        },
        available_ingredients: {
          type: "array",
          description: "Liste des ingr√©dients trouv√©s dans la base",
          items: {
            type: "object",
            properties: {
              id: { type: "string", description: "ID du produit" },
              name: { type: "string", description: "Nom du produit" },
              price: { type: "number", description: "Prix du produit" },
              imageUrl: { type: "string", description: "URL de l'image du produit" },
            },
          },
        },
        missing_ingredients: {
          type: "array",
          description: "Ingr√©dients n√©cessaires mais non disponibles en base",
          items: { type: "string" },
        },
        steps: {
          type: "array",
          description: "√âtapes d√©taill√©es de la recette",
          items: { type: "string" },
        },
      },
      required: ["dish", "ingredients_needed", "available_ingredients", "missing_ingredients", "steps"],
      additionalProperties: false,
    };


    // **Am√©lioration du prompt pour l'IA**
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: `
            Tu es un assistant culinaire sp√©cialis√© dans l'analyse d'images de plats et la g√©n√©ration de recettes. 
            Ta t√¢che est de d√©tecter le plat sur l'image fournie et de g√©n√©rer une recette en te basant uniquement sur les ingr√©dients disponibles dans notre base de donn√©es.

            ### Directives d'analyse :
            1. **D√©tecte le plat** principal sur l'image.
            2. **Identifie les ingr√©dients n√©cessaires** √† la recette.
            3. **Compare chaque ingr√©dient avec la base de donn√©es fournie**.
              - Si l‚Äôingr√©dient est pr√©sent en base, ajoute-le dans "available_ingredients".
              - Si l‚Äôingr√©dient est absent en base, ajoute-le dans "missing_ingredients".
            4. **G√©n√®re des √©tapes claires et pr√©cises** pour r√©aliser la recette.

            ### Liste des ingr√©dients disponibles en base :
            ${JSON.stringify(productNames)}
            - Structure ta r√©ponse strictement selon ce sch√©ma : ${JSON.stringify(recipeSchema)}
            **Ne g√©n√®re que des ingr√©dients pr√©sents dans la base pour "available_ingredients".**
            **Ne fais aucune supposition : si un ingr√©dient n'est pas en base, mets-le dans "missing_ingredients".**
            **Garde une structure JSON 100% valide.**
          `,
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `- Analyse cette image et g√©n√®re une recette. Voici la liste des ingr√©dients disponibles en base : ${JSON.stringify(productNames)}`
            },
            {
              type: "image_url",
              image_url: { url: imageBase64 }
            }
          ],
        },
      ],
      max_tokens: 600,
      functions: [
        {
          name: "generate_recipe",
          description: "G√©n√©ration d'une recette d√©taill√©e en JSON",
          parameters: recipeSchema,
        },
      ],
      function_call: { name: "generate_recipe" },
    });

    // üõ† V√©rification de la r√©ponse OpenAI
    if (!response.choices[0]?.message?.function_call?.arguments) {
      return NextResponse.json({ error: "Impossible de g√©n√©rer une recette" }, { status: 500 });
    }

    // üéØ **R√©cup√©ration des ingr√©dients disponibles + leur d√©tail**
    const rawRecipe = JSON.parse(response.choices[0].message.function_call.arguments || "{}");

    // üåü Correspondance des ingr√©dients d√©tect√©s avec les produits en base
    const availableIngredients = products.filter((product) =>
      rawRecipe.ingredients_needed.some((ing: string) => ing.toLowerCase() === product.name.toLowerCase())
    );

    // üî¥ D√©tection des ingr√©dients manquants
    const missingIngredients = rawRecipe.ingredients_needed.filter(
      (ing: string) => !availableIngredients.some((prod) => prod.name.toLowerCase() === ing.toLowerCase())
    );

    // üìù Mise en forme de la r√©ponse
    const finalRecipe = {
      dish: rawRecipe.dish,
      ingredients_needed: rawRecipe.ingredients_needed,
      available_ingredients: availableIngredients.map((prod) => ({
        id: prod.id,
        name: prod.name,
        price: prod.price,
        imageUrl: prod.imageUrl,
      })),
      missing_ingredients: missingIngredients,
      steps: rawRecipe.steps,
    };

    // ‚úÖ Stocker les ingr√©dients manquants dans `ProductSuggestion`
    for (const missing of finalRecipe.missing_ingredients) {
      await prisma.productSuggestion.upsert({
        where: { name: missing },
        update: {},
        create: { name: missing },
      });
    }

    return NextResponse.json(finalRecipe);
  } catch (error) {
    console.error("‚ùå Erreur analyse plat :", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}
